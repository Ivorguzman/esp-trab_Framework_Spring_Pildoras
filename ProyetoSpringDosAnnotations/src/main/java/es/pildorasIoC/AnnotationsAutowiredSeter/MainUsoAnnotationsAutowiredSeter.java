package es.pildorasIoC.AnnotationsAutowiredSeter;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainUsoAnnotationsAutowiredSeter {

	public static void main(String[] args) {


		// *********** 01 leer el xml de configuraci√≥n ********
		ClassPathXmlApplicationContext contextoAnnotation = new ClassPathXmlApplicationContext("aplicacionContexAnnotationAutowiredSeter.xml");




		// ********** 02 pedir bean al contenedor ***********
		// Cuando se utiliza la anotaci√≥n con atributo:[ @Component("Experimentado") ]
		/* Empleados antonio = contextoAnnotation.getBean("Experimentado", Empleados.class) */

		// Cuando se utiliza la anotacion sin atributa: @Component() [nombre de la clase en minuscula ==> "comercialExperimentadoAutowired"]
		// Empleados antonio = contextoAnnotation.getBean("ComercialExperimentadoAutowired", Empleados.class);
		Empleados antonio = contextoAnnotation.getBean("comercialExperimentadoAutowired", Empleados.class);






		// ********* 03 Usar el bean ***********

		System.out.println(antonio.getTareas());

		System.out.println(antonio.getInformes());




		// 03 Cerrar Contexto

		contextoAnnotation.close();








		/*
		 * *************************************************************************
		 * 
		 * [La inversi√≥n de control es un (patr√≥n de programaci√≥n) que consiste en delegar el control
		 * del flujo de un programa a un contenedor o framework.] Esto permite desacoplar
		 * los componentes de una aplicaci√≥n y facilitar su prueba y mantenimiento.
		 * Un ejemplo de inversi√≥n de control es el uso de interfaces gr√°ficas que manejan los eventos
		 * del usuario y llaman a los m√©todos apropiados del programa¬π.
		 * 
		 * [La inyecci√≥n de dependencias es un (tipo espec√≠fico de inversi√≥n de control)
		 * que consiste en proveer a una clase los objetos que necesita para realizar sus funciones, en
		 * lugar de crearlos dentro de la misma clase.] Esto permite que la clase
		 * sea m√°s flexible y reutilizable, ya que puede trabajar con diferentes implementaciones de las
		 * dependencias. Un ejemplo de inyecci√≥n de dependencias es el uso de anotaciones como
		 *
		 * @Autowired o @Inject en Spring para indicar al contenedor qu√© beans debe inyectar
		 * en los campos o constructores de una clase.
		 * 
		 * NOTA: [Una dependencia en es un m√≥dulo o biblioteca que proporciona una funcionalidad espec√≠fica a la aplicaci√≥n]
		 * 
		 *
		 * Spring es un framework de Java que facilita el desarrollo de aplicaciones empresariales
		 * mediante el uso de inversi√≥n de control inyecci√≥n de dependencias.
		 * Spring ofrece varios m√≥dulos para integrar diferentes tecnolog√≠as como web,
		 * datos, seguridad, etc. Spring Boot es una extensi√≥n de Spring que simplifica la configuraci√≥n y el
		 * despliegue de las aplicaciones, mediante el uso de autoconfiguraci√≥n y convenciones sobre configuraci√≥n¬≥.
		 */














		/**
		 * **************************************************************************************
		 * Hola, este es Bing. Estoy aqu√≠ para ayudarte. üòä
		 * 
		 * El mensaje de error `No bean named 'comercialExperimentadoAutowired' available` significa que el contenedor de Spring no puede encontrar una definici√≥n
		 * de bean para el nombre dado. Un bean es un objeto que es gestionado por el contenedor de Spring y que puede ser usado por otros componentes
		 * en la aplicaci√≥n. Hay varias posibles razones por las que este error puede ocurrir, como:
		 * 
		 * - El bean no est√° anotado con `@Component`, `@Controller`, `@Service`, o `@Repository`, que son las anotaciones que le dicen a Spring
		 * que cree y registre un bean para la clase¬π¬≤.-
		 * - El bean est√° en un paquete diferente al de la clase principal de la aplicaci√≥n,
		 * y el paquete no es escaneado por Spring. Por defecto, Spring escanea el paquete actual y los subpaquetes donde la clase principal
		 * de la aplicaci√≥n est√° anotada con `@SpringBootApplication`. Si quieres escanear otros paquetes, necesitas especificarlos
		 * en el atributo `scanBasePackages` de la anotaci√≥n¬π¬≥.
		 * - El bean est√° definido en un archivo de configuraci√≥n XML, pero el archivo no es cargado por el contenedor de Spring.
		 * Necesitas asegurarte de que el archivo XML est√° en el classpath y que usas `@ImportResource` o `@Configuration` para cargarlo‚Å¥.
		 * 
		 * 
		 */















	}

}
